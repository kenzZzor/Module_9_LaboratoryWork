public interface IPaymentProcessor
{
    void ProcessPayment(double amount);
    void RefundPayment(double amount);
}

public class InternalPaymentProcessor : IPaymentProcessor
{
    public void ProcessPayment(double amount)
    {
        Console.WriteLine($"Processing payment of {amount} via internal system.");
    }

    public void RefundPayment(double amount)
    {
        Console.WriteLine($"Refunding payment of {amount} via internal system.");
    }
}

public class ExternalPaymentSystemA
{
    public void MakePayment(double amount)
    {
        Console.WriteLine($"Making payment of {amount} via External Payment System A.");
    }

    public void MakeRefund(double amount)
    {
        Console.WriteLine($"Making refund of {amount} via External Payment System A.");
    }
}

public class ExternalPaymentSystemB
{
    public void SendPayment(double amount)
    {
        Console.WriteLine($"Sending payment of {amount} via External Payment System B.");
    }

    public void ProcessRefund(double amount)
    {
        Console.WriteLine($"Processing refund of {amount} via External Payment System B.");
    }
}

public class PaymentAdapterA : IPaymentProcessor
{
    private ExternalPaymentSystemA _externalSystemA;

    public PaymentAdapterA(ExternalPaymentSystemA externalSystemA)
    {
        _externalSystemA = externalSystemA;
    }

    public void ProcessPayment(double amount)
    {
        _externalSystemA.MakePayment(amount);
    }

    public void RefundPayment(double amount)
    {
        _externalSystemA.MakeRefund(amount);
    }
}

public class PaymentAdapterB : IPaymentProcessor
{
    private ExternalPaymentSystemB _externalSystemB;

    public PaymentAdapterB(ExternalPaymentSystemB externalSystemB)
    {
        _externalSystemB = externalSystemB;
    }

    public void ProcessPayment(double amount)
    {
        _externalSystemB.SendPayment(amount);
    }

    public void RefundPayment(double amount)
    {
        _externalSystemB.ProcessRefund(amount);
    }
}

public class PaymentFactory
{
    public static IPaymentProcessor GetPaymentProcessor(string paymentMethod, string currency)
    {
        switch (paymentMethod)
        {
            case "Internal":
                return new InternalPaymentProcessor();

            case "ExternalA":
                if (currency == "USD")
                {
                    return new PaymentAdapterA(new ExternalPaymentSystemA());
                }
                break;

            case "ExternalB":
                if (currency == "EUR")
                {
                    return new PaymentAdapterB(new ExternalPaymentSystemB());
                }
                break;

            default:
                throw new ArgumentException("Invalid payment method or currency.");
        }

        throw new InvalidOperationException("No suitable payment processor found for the given parameters.");
    }
}

class Program
{
    static void Main(string[] args)
    {
        ProcessPayment("Internal", "USD", 100.0);
        ProcessPayment("ExternalA", "USD", 200.0);
        ProcessPayment("ExternalB", "EUR", 300.0);
        ProcessPayment("ExternalB", "USD", 300.0); 

        RefundPayment("Internal", "USD", 50.0);
        RefundPayment("ExternalA", "USD", 100.0);
        RefundPayment("ExternalB", "EUR", 150.0);
        RefundPayment("ExternalB", "USD", 150.0); 
    }

    static void ProcessPayment(string paymentMethod, string currency, double amount)
    {
        try
        {
            IPaymentProcessor processor = PaymentFactory.GetPaymentProcessor(paymentMethod, currency);
            processor.ProcessPayment(amount);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error processing payment: {ex.Message}");
        }
    }

    static void RefundPayment(string paymentMethod, string currency, double amount)
    {
        try
        {
            IPaymentProcessor processor = PaymentFactory.GetPaymentProcessor(paymentMethod, currency);
            processor.RefundPayment(amount);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error processing refund: {ex.Message}");
        }
    }
}
